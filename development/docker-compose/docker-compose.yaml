# https://docs.docker.com/compose/compose-file/

x-common-variables: &common-variables
  JAVA_TOOL_OPTIONS: -XX:MaxRAMPercentage=60.0 -Dlogging.level.com.backbase=DEBUG
  SIG_SECRET_KEY: JWTSecretKeyDontUseInProduction!
  USERCTX_KEY: JWTSecretKeyDontUseInProduction!
  server.shutdown: graceful
  server.max-http-header-size: 64KB
  server.forward-headers-strategy: framework
  eureka.client.serviceUrl.defaultZone: http://registry:8080/eureka
  eureka.client.registry-fetch-interval-seconds: 15
  eureka.client.instance-info-replication-interval-seconds: 15
  eureka.client.healthcheck.enabled: true
  eureka.instance.non-secure-port: 8080
  eureka.instance.prefer-ip-address: true
  eureka.instance.initialStatus: STARTING
  management.endpoints.web.exposure.include: '*'
  management.endpoints.enabled-by-default: true
  management.security.roles: ANONYMOUS,ACTUATOR,USER
  management.endpoint.env.show-values: ALWAYS
  management.endpoint.configprops.show-values: ALWAYS
  # Observability - Tracing and Prometheus Configuration
  management.tracing.enabled: false
  management.endpoint.prometheus.enabled: true

  spring.main.banner-mode: off
  spring.cloud.config.enabled: false
  spring.cloud.kubernetes.enabled: false
  backbase.audit.enabled: false
  backbase.security.public.paths: /integration-api/**,/oauth/token,/convert,/client-api/**
  backbase.security.mtls.enabled: false
  backbase.http.request-logging-filter.max-payload-length: 5000
  logging.level.com.backbase: DEBUG
  logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter: INFO

x-database-variables: &database-variables
  logging.level.liquibase: INFO
  spring.liquibase.enabled: true
  spring.datasource.username: root
  spring.datasource.password: root
  spring.datasource.driver-class-name: com.mysql.cj.jdbc.Driver
  spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL8Dialect

x-message-broker-variables: &message-broker-variables
  spring.activemq.broker-url: tcp://activemq:61616
  spring.activemq.user: admin
  spring.activemq.password: admin

x-healthcheck-defaults: &healthcheck-defaults
  start_period: 60s
  interval: 15s
  timeout: 15s
  retries: 15

name: backbase

volumes:
  mysql_data:
    driver: local

services:
  mysql:
    image: mysql:8.0.31
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping --silent
      interval: 10s
      timeout: 5s
      retries: 5

  activemq:
    image: apache/activemq-classic
    ports:
      - "61616:61616"
      - "8161:8161"
    healthcheck:
      test: activemq status
      interval: 10s
      timeout: 5s
      retries: 5

  registry:
    image: repo.backbase.com/backbase-docker-releases/registry:${BB_VERSION}
    ports:
      - "8761:8080"
    environment:
      spring.zipkin.enabled: false
#    volumes:
#      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
#    healthcheck:
#      <<: *healthcheck-defaults
#      test: [ "CMD", "java", "-jar", "/tmp/HealthCheck.jar" ]

  edge:
    image: repo.backbase.com/backbase-docker-releases/edge:${BB_VERSION}
    ports:
      - "7777:8080"
    environment:
      <<: *common-variables
      gateway.actuator.security.enabled: false
      gateway.csrf.enabled: false
    volumes:
      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "-jar", "/tmp/HealthCheck.jar", "http://registry:8080/eureka/apps/edge", "<status>UP</status>" ]
    links:
      - registry
      - token-converter

  token-converter:
    image: repo.backbase.com/backbase-docker-releases/oidc-token-converter-service:${BB_VERSION}
    ports:
      - "7779:8080"
    environment:
      <<: *common-variables
      backbase.oidc-token-converter.whitelistedDomains[0].internalHostScheme: http
      backbase.oidc-token-converter.whitelistedDomains[0].internalHost: backbase-identity:8080
      backbase.oidc-token-converter.whitelistedDomains[0].issuerHost: localhost
    volumes:
      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "-jar", "-Xms5M", "-Xmx10M", "/tmp/HealthCheck.jar", "http://registry:8080/eureka/apps/token-converter", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity

  backbase-identity:
    image: auth-server:${BB_VERSION}
    build:
      context: ../images/auth-server
      args:
        IDENTITY_BUILDER: repo.backbase.com/backbase-docker-releases/auth-server-builder:${BB_VERSION}
    ports:
      - '8180:8080'
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      BACKBASE_HTTP_CORS: "false"
      BACKBASE_HTTP_CORS_EXPOSED_HEADERS: "Location"
      BACKBASE_HTTP_CORS_ORIGINS: "*"
      KC_DB_URL: "jdbc:mysql://mysql:3306/backbase_identity?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true"
      KC_DB_USERNAME: "root"
      KC_DB_PASSWORD: "root"
      KC_LOG_LEVEL: "INFO"
      KC_LOG_CONSOLE_FORMAT: "%d{yyy:MM:dd HH:mm:ss.SSS} %-5p [%X{traceId},%X{spanId},%X{sampled}] %i --- [%t] %c{2.} : %m%n"
      KC_HOSTNAME_URL: "http://localhost:8180/auth/"
      KC_SPI_SERVICE_TOKEN_DEFAULT_URL: "http://token-converter:8080"
      KC_SPI_USER_MANAGER_CLIENT_DEFAULT_URL: "http://user-manager:8080"
      KC_SPI_CONNECTIONS_JPA_LEGACY_INITIALIZE_EMPTY: "true"
      KC_SPI_CONNECTIONS_JPA_LEGACY_MIGRATION_STRATEGY: "update"
      JAVA_TOOL_OPTIONS: "-Dquarkus.log.category.'\"com.backbase\"'.level=DEBUG \
                          -Dquarkus.log.category.'\"org.keycloak.protocol.oidc\"'.level=TRACE"
    volumes:
      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "-jar", "-Xms5M", "-Xmx10M", "/tmp/HealthCheck.jar", "http://localhost:8080/auth/realms/backbase/.well-known/openid-configuration", "backbase" ]
    depends_on:
      mysql:
        condition: service_healthy
  backbase-identity-2:
    image: auth-server:${BB_VERSION}
    build:
      context: ../images/auth-server
      args:
        IDENTITY_BUILDER: repo.backbase.com/backbase-docker-releases/auth-server-builder:${BB_VERSION}
    ports:
      - '8181:8080'
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      BACKBASE_HTTP_CORS: "true"
      BACKBASE_HTTP_CORS_EXPOSED_HEADERS: "Location"
      BACKBASE_HTTP_CORS_ORIGINS: "http://localhost:4200,http://localhost:8080"
      KC_DB_URL: "jdbc:mysql://mysql:3306/backbase_identity_2?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true"
      KC_DB_USERNAME: "root"
      KC_DB_PASSWORD: "root"
      KC_LOG_LEVEL: "INFO"
      KC_LOG_CONSOLE_FORMAT: "%d{yyy:MM:dd HH:mm:ss.SSS} %-5p [%X{traceId},%X{spanId},%X{sampled}] %i --- [%t] %c{2.} : %m%n"
      KC_HOSTNAME_URL: "http://localhost:8181/auth/"
      KC_SPI_SERVICE_TOKEN_DEFAULT_URL: "http://token-converter:8080"
      KC_SPI_USER_MANAGER_CLIENT_DEFAULT_URL: "http://user-manager:8080"
      KC_SPI_CONNECTIONS_JPA_LEGACY_INITIALIZE_EMPTY: "true"
      KC_SPI_CONNECTIONS_JPA_LEGACY_MIGRATION_STRATEGY: "update"
      JAVA_TOOL_OPTIONS: "-Dquarkus.log.category.'\"com.backbase\"'.level=DEBUG \
                          -Dquarkus.log.category.'\"org.keycloak.protocol.oidc\"'.level=TRACE"
    volumes:
      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "-jar", "-Xms5M", "-Xmx10M", "/tmp/HealthCheck.jar", "http://localhost:8080/auth/realms/backbase/.well-known/openid-configuration", "backbase" ]
    depends_on:
      mysql:
        condition: service_healthy
  access-control:
    image: repo.backbase.com/backbase-docker-releases/access-control:${BB_VERSION}
    ports:
      - "8040:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/access-control?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "-jar", "-Xms5M", "-Xmx10M", "/tmp/HealthCheck.jar", "http://registry:8080/eureka/apps/access-control", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry
  accessgroup-integration-service:
    container_name: accessgroup-integration-service
    profiles:
      - iam
      - access-control
    image: repo.backbase.com/backbase-docker-releases/accessgroup-integration-service:${BB_VERSION}
    ports:
      - "8041:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/accessgroup-integration-service", "<status>UP</status>" ]
    links:
      - activemq
      - registry
  arrangement-manager:
    image: repo.backbase.com/backbase-docker-releases/arrangement-manager:${BB_VERSION}
    ports:
      - "8050:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/arrangement-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      spring.config.additional-location: file:/tmp/application.yml
    volumes:
      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
      - ../config/arrangement/application.yaml:/tmp/application.yml
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "-jar", "-Xms5M", "-Xmx10M", "/tmp/HealthCheck.jar", "http://registry:8080/eureka/apps/arrangement-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  user-manager:
    image: repo.backbase.com/backbase-docker-releases/user-manager:${BB_VERSION}
    ports:
      - "8060:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/user-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      backbase.users.identity-endpoints-enabled: true
      backbase.users.identity-integration-enabled: true
      backbase.users.sync-primary-to-identity-enabled: true
      spring.cloud.discovery.client.simple.instances.user-integration-outbound-service[0].uri: http://wiremock:8080
    volumes:
      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "-jar", "-Xms5M", "-Xmx10M", "/tmp/HealthCheck.jar", "http://registry:8080/eureka/apps/user-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  identity-integration-service:
    image: repo.backbase.com/backbase-docker-releases/identity-integration-service:${BB_VERSION}
    ports:
      - "8070:8080"
    environment:
      <<: *common-variables
      identity.serverUrl: http://backbase-identity:8080/auth
      identity.masterAdmin.username: admin
      identity.masterAdmin.password: admin
      identity.realmConfiguration.fallbackOptions.enableUser: true
      identity.realmConfiguration.fallbackOptions.useTemporaryPassword: true
    volumes:
      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "-jar", "-Xms5M", "-Xmx10M", "/tmp/HealthCheck.jar", "http://registry:8080/eureka/apps/identity-integration-service", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity
  legalentity-integration-service:
    container_name: legalentity-integration-service
    profiles:
      - iam
      - access-control
    image: repo.backbase.com/backbase-docker-releases/legalentity-integration-service:${BB_VERSION}
    ports:
      - "8043:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/legalentity-integration-service", "<status>UP</status>" ]
    links:
      - activemq
      - registry
  product-catalog-task:
    image: repo.backbase.com/backbase-stream-images/product-catalog-task:${STREAM_VERSION}
    profiles:
      - bootstrap
    environment:
      <<: *common-variables
      spring.config.additional-location: file:/tmp/ingestion.yml
    volumes:
      - ../config/stream/ingestion.yml:/tmp/ingestion.yml
    depends_on:
      token-converter:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy

  legal-entity-bootstrap-task:
    image: repo.backbase.com/backbase-stream-images/legal-entity-bootstrap-task:${STREAM_VERSION}
    profiles:
      - bootstrap
    environment:
      <<: *common-variables
      spring.config.additional-location: file:/tmp/ingestion.yml
    volumes:
      - ../config/stream/ingestion-updated.yml:/tmp/ingestion.yml
    depends_on:
      token-converter:
        condition: service_healthy
      access-control:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy
      user-manager:
        condition: service_healthy
      identity-integration-service:
        condition: service_healthy
      backbase-identity:
        condition: service_healthy
      product-catalog-task:
        condition: service_completed_successfully

  wiremock:
    image: wiremock/wiremock:2.32.0
    profiles:
      - with-mocks
    command:
      - --global-response-templating
      - --verbose
    volumes:
      - ./stubs:/home/wiremock

  postman-health-check:
    image: postman/newman
    platform: linux/amd64
    command:
      run /etc/newman/postman_collection.json --environment="/etc/newman/postman_environment.json"
    volumes:
      - ../../test/postman/HealthCheck_Local-Backend-Environment.postman_collection.json:/etc/newman/postman_collection.json
      - ../../test/postman/Docker-Backend-Environment.postman_environment.json:/etc/newman/postman_environment.json
    depends_on:
      access-control:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy
      backbase-identity:
        condition: service_healthy
      identity-integration-service:
        condition: service_healthy
      token-converter:
        condition: service_healthy
      user-manager:
        condition: service_healthy

  # <EXAMPLE-SERVICE-NAME>:
  #   image: <DOCKER-REGISTRY>/<REPOSITORY-NAME>:<TAG>
  #   ports:
  #     - "8090:8080"
  #   environment:
  #     <<: *common-variables
  #     eureka.client.enabled: 'true'
  #   volumes:
  #     - ./scripts/HealthCheck.jar:/tmp/HealthCheck.jar
  #   healthcheck:
  #     <<: *healthcheck-defaults
  #     test: [ "CMD", "java", "-jar", "-Xms5M", "-Xmx10M", "/tmp/HealthCheck.jar", "http://registry:8080/eureka/apps/<EXAMPLE-SERVICE-NAME>", "<status>UP</status>" ]
  #   links:
  #     - registry

  prometheus:
    image: prom/prometheus
    profiles:
      - observable
    volumes:
      - ./monitor/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    restart: always
    ports:
      - '9090:9090'

  grafana:
    image: grafana/grafana
    profiles:
      - observable
    volumes:
      - ./monitor/grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasources.yml
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - prometheus


  card-manager:
    image: repo.backbase.com/backbase-docker-releases/card-manager:${BB_VERSION}
    ports:
      - "8081:8080"
    profiles:
      - card
    environment:
      <<: *common-variables
      backbase.card.issuerId: "1"
  cards-presentation-service:
    image: repo.backbase.com/backbase-docker-releases/cards-presentation-service:2022.08.3-LTS-0.1.0
    ports:
      - "8082:8080"
    profiles:
      - card
    environment:
      <<: *common-variables

  loan:
    image: repo.backbase.com/backbase-docker-releases/loan:2023.09.5-LTS
    ports:
      - "8071:8080"
    profiles:
      - loan
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/loan?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
  loan-integration-outbound-mock:
    image: repo.backbase.com/backbase-docker-releases/loan-integration-outbound-mock:2023.09.64-LTS
    profiles:
      - loan
    ports:
      - "8072:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.activemq.broker-url: tcp://activemq:61616
      spring.activemq.user: admin
      spring.activemq.password: admin
      spring.datasource.url: jdbc:mysql://mysql:3306/loan-integration-outbound?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    links:
      - activemq
      - registry
  payment-order-options:
    image: repo.backbase.com/backbase-docker-releases/payment-order-options:${BB_VERSION}
    profiles:
      - payments
    ports:
      - "8073:8080"
    environment:
      <<: *common-variables
#      spring.profiles.active: "us"
#      spring.profiles.active: "universal"
#      spring.config.additional-location: file:/tmp/payment-order-options.yml
    volumes:
      - ../config/payment-order-options.yml:/tmp/payment-order-options.yml
      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "-jar", "-Xms5M", "-Xmx10M", "/tmp/HealthCheck.jar", "http://registry:8080/eureka/apps/identity-integration-service", "<status>UP</status>" ]

  payment-order-options-2:
    image: repo.backbase.com/backbase-docker-releases/payment-order-options:2024.09.2-LTS
    profiles:
      - payments
    ports:
      - "8074:8080"
    environment:
      <<: *common-variables
    #      spring.profiles.active: "us"
    #      spring.profiles.active: "universal"
    #      spring.config.additional-location: file:/tmp/payment-order-options.yml
    volumes:
      - ../config/payment-order-options.yml:/tmp/payment-order-options.yml
      - ./exe/HealthCheck.jar:/tmp/HealthCheck.jar
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "-jar", "-Xms5M", "-Xmx10M", "/tmp/HealthCheck.jar", "http://registry:8080/eureka/apps/identity-integration-service", "<status>UP</status>" ]


  payment-order-service:
      container_name: payment-order-service
      profiles:
        - dbs
        - payments
      image: repo.backbase.com/backbase-docker-releases/payment-order-service:${BB_VERSION}
      ports:
        - "8373:8080"
      environment:
        <<: [*common-variables,*message-broker-variables,*database-variables ]
        spring.datasource.url: jdbc:mysql://mysql:3306/payment-order-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
        spring.profiles.active: backbase_us_retail
        backbase.payments.limits.enabled: false
      volumes:
        - ./scripts:/tmp/h
      healthcheck:
        <<: *healthcheck-defaults
        test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment-order-service", "<status>UP</status>" ]
      depends_on:
        mysql:
          condition: service_healthy
    #    links:
    #      - activemq
    #      - registry

  budget-planner:
      container_name: budget-planner
      profiles:
        - banking-services
        - pfm
      image: repo.backbase.com/backbase-docker-releases/budget-planner:${BB_VERSION}
      ports:
        - "8380:8080"
      environment:
        <<: [ *common-variables, *message-broker-variables, *database-variables ]
        spring.datasource.url: jdbc:mysql://mysql:3306/budget-planner?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      volumes:
        - ./scripts:/tmp/h
      healthcheck:
        <<: *healthcheck-defaults
        test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/budget-planner", "<status>UP</status>" ]
      depends_on:
        mysql:
          condition: service_healthy
      links:
        - activemq
        - registry

  pocket-tailor:
      container_name: pocket-tailor
      profiles:
        - banking-services
        - pfm
      image: repo.backbase.com/backbase-docker-releases/pocket-tailor:${BB_VERSION}
      ports:
        - "8381:8080"
      environment:
        <<: [ *common-variables, *message-broker-variables, *database-variables ]
        spring.datasource.url: jdbc:mysql://mysql:3306/pocket-tailor?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      volumes:
        - ./scripts:/tmp/h
      healthcheck:
        <<: *healthcheck-defaults
        test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/pocket-tailor", "<status>UP</status>" ]
      depends_on:
        mysql:
          condition: service_healthy
      links:
        - activemq
        - registry

  transaction-category-collector:
      container_name: transaction-category-collector
      profiles:
        - banking-services
        - pfm
      image: repo.backbase.com/backbase-docker-releases/transaction-category-collector:${BB_VERSION}
      ports:
        - "8382:8080"
      environment:
        <<: [ *common-variables, *message-broker-variables, *database-variables ]
        spring.datasource.url: jdbc:mysql://mysql:3306/transaction-category-collector?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
        backbase.category.management.enabled: true
        backbase.transaction.enrichment.provider: mock
      volumes:
        - ./scripts:/tmp/h
      healthcheck:
        <<: *healthcheck-defaults
        test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-category-collector", "<status>UP</status>" ]
      depends_on:
        mysql:
          condition: service_healthy
      links:
        - activemq
        - registry

  account-mock:
      container_name: account-mock
      profiles:
        - banking-services
        - product-summary
      image: repo.backbase.com/backbase-docker-releases/account-mock:${BB_VERSION}
      ports:
        - "8391:8080"
      environment:
        <<: [ *common-variables, *message-broker-variables ]
      volumes:
        - ./scripts:/tmp/h
      healthcheck:
        <<: *healthcheck-defaults
        test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/account-mock", "<status>UP</status>" ]
      links:
        - activemq
        - registry

  remote-deposit-capturer:
      container_name: remote-deposit-capturer
      profiles:
        - banking-services
      image: repo.backbase.com/backbase-docker-releases/remote-deposit-capturer:${BB_VERSION}
      ports:
        - "8400:8080"
      environment:
        <<: [ *common-variables, *message-broker-variables ]
        backbase.rdc.rovider: mock
      volumes:
        - ./scripts:/tmp/h
      healthcheck:
        <<: *healthcheck-defaults
        test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/remote-deposit-capturer", "<status>UP</status>" ]
      links:
        - activemq
        - registry

  transaction-enricher:
      container_name: transaction-enricher
      profiles:
        - transactions
      image: repo.backbase.com/backbase-docker-releases/transaction-enricher:${BB_VERSION}
      ports:
        - "8410:8080"
      environment:
        <<: [ *common-variables, *message-broker-variables, *database-variables ]
        spring.datasource.url: jdbc:mysql://mysql:3306/transaction-enricher?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
        backbase.communication.services.category.management.service-id: transaction-category-collector
        backbase.communication.services.category.management.service-url: /service-api/v2
        backbase.transaction.enrichment.provider: mock
        backbase.transaction.enrichment.mock.error-mode: false
      volumes:
        - ./scripts:/tmp/h
      healthcheck:
        <<: *healthcheck-defaults
        test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-enricher", "<status>UP</status>" ]
      depends_on:
        mysql:
          condition: service_healthy
      links:
        - activemq
        - registry

  transaction-manager:
      container_name: transaction-manager
      profiles:
        - transactions
      image: repo.backbase.com/backbase-docker-releases/transaction-manager:${BB_VERSION}
      ports:
        - "8411:8080"
      environment:
        <<: [ *common-variables, *message-broker-variables, *database-variables ]
        spring.datasource.url: jdbc:mysql://mysql:3306/transaction-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
        backbase.enrichment.enabled: true
        backbase.transaction.type: "ATM, ACH, Bill Payment, Cash, Credit/Debit Card, Check, Deposit, Fee, POS, Withdrawal"
        backbase.transaction.enrichment.enabled: true
        backbase.transactions.csv.export.date-format: "MM-dd-yyyy"
        backbase.transactions.csv.export.fields: "BBAN,name,counterPartyAccountNumber,counterPartyName,currency,amount,creditDebitIndicator,bookingDate,type,typeGroup,reference,instructedCurrency,currencyExchangeRate,instructedAmount,description,category,checkSerialNumber"
        backbase.transactions.csv.export.headers: "Account number(BBAN),Account name,Counter party account number,Counter party name,Currency,Amount,Credit/debit indicator,Book date,Transaction type,Transaction group,Transaction reference,Instructed currency,currency exchange rate,Instructed amount,Description,Category,Check number"
      volumes:
        - ./scripts:/tmp/h
      healthcheck:
        <<: *healthcheck-defaults
        test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-manager", "<status>UP</status>" ]
      depends_on:
        mysql:
          condition: service_healthy
      links:
        - activemq
        - registry

  confirmation:
    container_name: confirmation
    profiles:
      - iam-optional
      - confirmation
    image: repo.backbase.com/backbase-docker-releases/confirmation:${BB_VERSION}
    ports:
      - '8183:8080'
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/confirmation?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      sso.jwt.internal.type: signed
      sso.jwt.internal.signature.key.type: ENV
      sso.jwt.internal.signature.key.value: SIG_SECRET_KEY
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/confirmation", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
  approval-service:
    container_name: approval-service
    profiles:
      - iam-optional
      - approval
    image: repo.backbase.com/backbase-docker-releases/approval-service:${BB_VERSION}
    ports:
      - '8182:8080'
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/confirmation?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      sso.jwt.internal.type: signed
      sso.jwt.internal.signature.key.type: ENV
      sso.jwt.internal.signature.key.value: SIG_SECRET_KEY
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/confirmation", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy

  account-integration-service:
    container_name: account-integration-service
    profiles:
      - integration
    image: repo.backbase.com/backbase-docker-releases/account-integration-service:2022.08.3-LTS-0.1.0-SNAPSHOT-12
    ports:
      - '9001:8080'
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/account-integration-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      sso.jwt.internal.type: signed
      sso.jwt.internal.signature.key.type: ENV
      sso.jwt.internal.signature.key.value: SIG_SECRET_KEY
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/account-integration-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
  arrangement-pull-integration-service:
    container_name: arrangement-pull-integration-service
    profiles:
      - integration
    image: repo.backbase.com/backbase-docker-releases/arrangement-pull-integration-service:2022.08.3-LTS-0.1.0-SNAPSHOT-5
    ports:
      - '9002:8080'
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/arrangement-pull-integration-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/arrangement-pull-integration-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
  retail-web:
    profiles:
      - retail-web
    image: repo.backbase.com/backbase-docker-releases/retail-usa:2022.03.1
    ports:
      - "4300:4300"
    environment:
      # The port that the app is hosted on --e.g: 8080. Note that 0-1024 ports are for privileged access
      PORT: 4300
      # Path to API root for backend services --e.g: /api or my.web.domain.com/api
      API_ROOT: http://localhost:7777/api
      # Path to the authentication service endpoint --e.g: /auth or identity.server/auth
      AUTH_URL: http://localhost:8180/auth
      AUTH_REALM: /backbase

  employee-web:
    profiles:
      - emp-web
    image: repo.backbase.com/docker-releases/employee-app:2023.02-LTS-no-production
    ports:
      - "4200:4200"
    environment:
      # The port that the app is hosted on --e.g: 8080. Note that 0-1024 ports are for privileged access
      PORT: 4200
      # Path to API root for backend services --e.g: /api or my.web.domain.com/api
      API_ROOT: http://localhost:7777/api
      # Path to the authentication service endpoint --e.g: /auth or identity.server/auth
      AUTH_URL: http://localhost:8180/auth
      AUTH_REALM: employee
  retail-onboarding-prospect:
    profiles:
      - onboarding
    image: repo.backbase.com/backbase-docker-releases/retail-onboarding-prospect:2024.09-LTS
    ports:
      - "4400:8080"
    environment:
      PORT: 4400
  retail-onboarding-service:
    profiles:
      - onboarding
    image: repo.backbase.com/backbase-docker-releases/retail-onboarding-service:2024.09-LTS
    ports:
      - "9190:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/retail-onboarding-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/retail-onboarding-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
  contentservices:
    container_name: contentservices
    image: repo.backbase.com/backbase-docker-releases/contentservices:${BB_VERSION}
    profiles:
      - foundation-optional
    ports:
      - "8501:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/content-services?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/content-services", "<status>UP</status>" ]

  provisioning:
    container_name: provisioning
    image: repo.backbase.com/backbase-docker-releases/provisioning:${BB_VERSION}
    profiles:
      - foundation-optional
    ports:
      - "8502:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/provisioning?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      spring.datasource.hikari.pool-name: content-services
      spring.datasource.hikari.minimum-idle: 1
      spring.datasource.hikari.maximum-pool-size: 2
      spring.datasource.hikari.connection-test-query: SELECT 1

    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/provisioning", "<status>UP</status>" ]

  business-onboarding-case-manager:
    container_name: business-onboarding-case-manager
    image: repo.backbase.com/backbase-docker-releases/business-onboarding-case-manager:2023.09.9-LTS
    profiles:
      - onboarding
    ports:
      - "8503:8080"
    environment:
      PORT: 8503
      # Path to API root for backend services --e.g: /api or my.web.domain.com/api
      API_ROOT: http://localhost:7777/api
      # Path to the authentication service endpoint --e.g: /auth or identity.server/auth
      AUTH_URL: http://localhost:8180/auth
      AUTH_REALM: employee
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/provisioning", "<status>UP</status>" ]
  business-onboarding-service:
    container_name: business-onboarding-service
    image: repo.backbase.com/backbase-docker-releases/business-onboarding-service:2023.09.9-LTS
    profiles:
      - onboarding
    ports:
      - "8504:8080"
    environment:
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.jpa.hibernate.ddl-auto: none
      spring.liquibase.enabled: false
      backbase.flow.sme.additional-applicant.invitation.base-url: 'http://localhost:8504'
      backbase.flow.integrations.company-lookup.mode: mock
      backbase.flow.integrations.twilio.sms.direct.authToken: 'mock'
      backbase.flow.integrations.twilio.sms.direct.accountSid: 'mock'
      spring.datasource.url: jdbc:mysql://mysql:3306/business-onboarding-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/provisioning", "<status>UP</status>" ]

  business-onboarding-prospect:
    container_name: business-onboarding-prospect
    image: repo.backbase.com/backbase-docker-releases/business-onboarding-prospect:2023.09.9-LTS
    profiles:
      - onboarding
    ports:
      - "4600:8080"
    environment:
      PORT: 4600
      # Path to API root for backend services --e.g: /api or my.web.domain.com/api
      API_ROOT: http://localhost:7777/api
      # Path to the authentication service endpoint --e.g: /auth or identity.server/auth
      AUTH_URL: http://localhost:8180/auth
      AUTH_REALM: employee
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/provisioning", "<status>UP</status>" ]


  account-recovery-manager:
    container_name: account-recovery-manager
    image: repo.backbase.com/backbase-docker-releases/account-recovery-manager:2024.09.9-LTS
    profiles:
      - recovery
    ports:
      - "8509:8080"
    environment:
      backbase.account-recovery-manager.workflow.defaults.config.realm: 'backbase'
      backbase.account-recovery-manager.workflow.defaults.config.completion-url: 'http://localhost:8509/account-recovery-manager/complete'
      backbase.account-recovery-manager.workflow.defaults.config.password-redirect.identity-server-url: 'http://localhost:8180/auth'

      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/account-recovery-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/provisioning", "<status>UP</status>" ]

  identity-proxy-service:
    container_name: identity-proxy-service
    image: repo.backbase.com/backbase-docker-releases/identity-proxy-service:2023.09.4-LTS-digital-sales
    profiles:
      - recovery
    ports:
      - "8510:8080"
    environment:
      server.port: 8080
      <<: [ *common-variables, *message-broker-variables, *database-variables ]
      spring.datasource.url: jdbc:mysql://mysql:3306/identity-proxy?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/provisioning", "<status>UP</status>" ]

